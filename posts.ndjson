{"created_ts":1595089968792,"modified_ts":1595089968792,"title":"First post!","body_markdown":"This is my first published blog post. Well, it’s not actually published quite yet because this post is about building the blogging platform itself!\n\nMy personal hobby of a website is currently hosted with nodejs on a raspberry pi in my home. I’m aware that this setup isn’t the best idea, and is very possibly a bad idea...but it is fun. Not only do I save on hosting costs, I get the fulfillment of building my own solutions and getting some experience as I go.\n\nI’m considering building a basic CMS - nothing crazy, just a relatively simple way to load and display posts like these. To reduce complexities, this should be the main engine of my website. This wouldn’t be my first time building something similar to a CMS - one of my first ever websites (think Geocities days) implemented something like this. I’m not sure there was even a name for it back then. That’s not to imply that the idea was new, several places on the internet were doing similar things (pretty sure I got the idea from Xanga). A more resilient example would probably be Blogger.\n\nNode is a preference for this project because it’s so simple to spin anything up. Even now, I’m hosting a landing page using only a few lines of code. My hopes are to build upon this in an effort to make pushing out blog posts like these easier.\n\nThe idea is pretty straightforward...have the node webserver pull blog posts from a nosql database and render HTML to style the blog posts.\n\n- [Express](https://expressjs.com/)\n- [EJS](https://ejs.co/)\n - React/similar seems to be a bit over-the-top, but backend templating should be clean and not overly convoluted\n- [Marked.js](https://marked.js.org/) to format blog posts and make storing them simple and inexpensive\n- [neDB](https://github.com/louischatriot/nedb)\n - Prefer NoSQL for this, and embedded is preferred (less moving parts on the Pi is inevitably for the best)\n\n_Sidenote: I’m finally switching to [vscode](https://code.visualstudio.com/). I finally got around to testing it out on my hackbook (cheap little chromebook) and it runs surprisingly well. I’m ashamed for not switching sooner. Due to its superb git integration, switching also affords me the ability to drop the fancy graphical git tools I’ve been using._\n\n### Express ###\n\nSet up an HTTP server, handle requests. Interface with EJS to render HTML, interface with database to load posts.\n\n### Database ###\nI have some experience with neDB, and think it will be a perfect fit for this project. The lack of binaries and dependencies keep everything very simple. I’m thinking (for now) I’ll just more or less make a flat file of `posts`. Each post would have a `created_ts`, `modified_ts`, `title`, and `markdown_body`. neDB is great on its own, but I’d like to use a promisified version of it - for that I’ll use the package [`nedb-promises`](https://github.com/bajankristof/nedb-promises) - this will allow me to use async/await instead of callbacks. I think that’s really all there is to say about the database, nothing fancy.\n\n### Marked.js ###\nAnother simple idea. Store markdown directly in the database so fancy formatting can be applied during rendering using a call to `marked()`. Stylings can be applied during rendering.\n\n### EJS ###\nThis is probably the most complicated bit, but only due to the fact that rendering the HTML and CSS was likely always going to be the most complicated part of this project. It would be easy enough to just render some basic HTML along with serving static files, but I think a good way to keep everything tidy and uniform will be using EJS. That being said, it’s still _really_ not complicated at all. Just throwing some loops and formatting into a `.ejs` file and calling it good. Bootstrap is sort of a cop out, but it’s undeniably simple. I’ll just pull from a CDN and apply some basic formatting.\n\n### The Future ###\nIdeally, this is a very rough version of what I hope to be a portfolio website. There are some pretty glaring issues at this point, mostly that there’s no real landing page and the index page is just displaying every post. Obviously it makes a lot more sense to group posts by date, maybe show last x posts as cards with a snippet of the content (definitely not the entire body).\n\nThe current working version is pretty lightweight, but the code is as well - I'm ruling it a success.\n\nCheck out the code at:\n### [https://github.com/ovwhited/dwhite-codes](https://github.com/ovwhited/dwhite-codes) ###","_id":"At3WI6HESEpKwHJD"}
